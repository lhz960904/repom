import js from "@eslint/js";
// import stylistic from "@stylistic/eslint-plugin";

export default [
 
  {
    ignores: ['**/node_modules', '**/dist/**'],
    plugins: {
      // '@stylistic': stylistic
    },
    rules: {
      ...js.configs.recommended.rules,
      'array-callback-return': 'error',
      'no-constant-binary-expression': 'error',
      'no-constructor-return': 'error',
      'no-duplicate-imports': 'error',
      'no-new-native-nonconstructor': 'error',
      'no-self-compare': 'error',
      'no-use-before-define': 'error',
      'no-alert': 'error',
      'arrow-body-style': 'error',
      'block-scoped-var': 'error',
      'camelcase': 'error',
      'complexity': 'error',
      'consistent-return': 'error',
      'default-case-last': 'error',
      'default-param-last': 'error',
      'dot-notation': 'error',
      'eqeqeq': 'error',
      'func-name-matching': 'error',
      'grouped-accessor-pairs': 'error',
      'guard-for-in': 'error',
      'logical-assignment-operators': 'error',
      'max-depth': ['error', 500],
      'max-lines-per-function': ['error', { 'max': 100, 'skipBlankLines': true, 'skipComments': true }],
      'max-nested-callbacks': ['error', 3],
      'max-params': 'error',
      'multiline-comment-style': 'error',
      'new-cap': 'error',
      'no-array-constructor': 'error',
      'no-caller': 'error',
      'no-delete-var': 'error',
      'no-else-return': 'error',
      'no-empty': 'error',
      'no-empty-function': 'error',
      'no-empty-static-block': 'error',
      'no-extend-native': 'error',
      'no-extra-bind': 'error',
      'no-extra-boolean-cast': 'error', 
      'no-global-assign': 'error',
      'no-implicit-coercion': 'error',
      'no-invalid-this': 'error',
      'no-lone-blocks': 'error',
      'no-lonely-if': 'error',
      'no-loop-func': 'error',
      'no-multi-assign': 'error',
      'no-multi-str': 'error',
      'no-negated-condition': 'error',
      'no-nested-ternary': 'error',
      'no-new-func': 'error',
      'no-new-wrappers': 'error',
      'no-object-constructor': 'error',
      'no-param-reassign': 'error',
      'no-redeclare': 'error',
      'no-regex-spaces': 'error',
      'no-return-assign': 'error',
      'no-sequences': 'error',
      'no-shadow': 'error',
      'no-undef-init': 'error',
      'no-unused-expressions': 'error',
      'no-unused-labels': 'error',
      'no-useless-call': 'error',
      'no-useless-catch': 'error',
      'no-useless-computed-key': 'error',
      'no-useless-concat': 'error',
      'no-useless-constructor': 'error',
      'no-useless-rename': 'error',
      'no-useless-return': 'error',
      'no-var': 'error',
      'no-void': 'error',
      'object-shorthand': 'error',
      'one-var': 'error',
      'operator-assignment': 'error',
      'prefer-arrow-callback': 'error',
      'prefer-const': 'error',
      'prefer-destructuring': 'error',
      'prefer-object-spread': 'error',
      'prefer-promise-reject-errors': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error',
      'prefer-template': 'error',
      'sort-imports': 'error',
      'symbol-description': 'error',
      'yoda': 'error',

      // warn because in development, we may want to use console.log or temporary code
      'no-unused-private-class-members': 'warn',
      'no-unused-vars': 'warn',
      'no-console': ['warn', { allow: ["warn", "error"] }],

      // style format
      'space-infix-ops': 'error',
    }
  },
];
 